image: docker:git

variables:
  GCP_PROJECT_ID: cicd-testing-project
  GCP_PRODUCTION_CLUSTER_ZONE: europe-west1-b
  GOOGLE_CLOUD_ACCOUNT: $GCLOUD_SERVICE_KEY
  IMAGE_BASE_TAG: $CI_PROJECT_TITLE-$CI_COMMIT_REF_SLUG
  IMAGE_TAG: $CI_PROJECT_TITLE-$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA
  GCP_PRODUCTION_CLUSTER_NAME: $CI_PROJECT_TITLE-$CI_COMMIT_REF_SLUG

stages:
#  - test
  - build
  - deploy

#tests:
#  stage: test
#  script:
#    - python test.py
#  tags:
#    - docker

build:
  stage: build
  image: google/cloud-sdk
  services:
  - docker:dind
  before_script:
    - echo $IMAGE_TAG
    - export DOCKER_HOST="tcp://docker:2375"
    - echo $GCLOUD_SERVICE_KEY | base64 --decode | docker login -u _json_key --password-stdin https://eu.gcr.io
  script:
    - echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
    - gcloud auth configure-docker
    - docker build -t gcr.io/$GCP_PROJECT_ID/$IMAGE_TAG .
    - docker push gcr.io/$GCP_PROJECT_ID/$IMAGE_TAG

deploy:
  stage: deploy
  image: google/cloud-sdk
  script:
    # GCloud authentication
    - echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
    - gcloud auth configure-docker
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud config set compute/zone $GCP_PRODUCTION_CLUSTER_ZONE
    # Create cluster and get credentials for branch
    - gcloud container clusters describe $GCP_PRODUCTION_CLUSTER_NAME &> /dev/null && echo cluster already created || gcloud container clusters create $GCP_PRODUCTION_CLUSTER_NAME --num-nodes=1
    - gcloud container clusters get-credentials $GCP_PRODUCTION_CLUSTER_NAME
    # Deploy app
    - kubectl get deployments $GCP_PRODUCTION_CLUSTER_NAME &> /dev/null && kubectl set image deployment/$GCP_PRODUCTION_CLUSTER_NAME $IMAGE_BASE_TAG=gcr.io/$GCP_PROJECT_ID/$IMAGE_TAG || kubectl create deployment $GCP_PRODUCTION_CLUSTER_NAME --image=gcr.io/$GCP_PROJECT_ID/$IMAGE_TAG
    - kubectl get pods
    - kubectl get svc $GCP_PRODUCTION_CLUSTER_NAME &> /dev/null && echo already exposed || kubectl expose deployment $GCP_PRODUCTION_CLUSTER_NAME --type=LoadBalancer --port 80 --target-port 8080
    - kubectl get service

